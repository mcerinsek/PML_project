{
    "contents" : "---\ntitle: \"Practical Machine Learning, Course Project\"\nauthor: \"Monika\"\noutput: html_document\n---\n\n# Background\n\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).\n\nThe goal of this project is to predict the manner in which they did the exercise. This is the \"classe\" variable in the training set. I could use any of the other variables to predict with. The following is the report describing how I built your model, how I used cross validation, what I think the expected out of sample error is, and why I made the choices I did. I also used your prediction model to predict 20 different test cases. \n\n\n# Data\n\nData is downloaded into local files - there are two sets of data, the training set and the testing set. I will use the testing set to perform the predictions from the final model on. When manually checking the data I noticed '#DIV/0!' value in numeric data, which I transformed into NA values.\n\n```{r}\nlibrary(caret, quietly=TRUE)\n#download.file(url = 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', \n#               destfile = 'train.csv')\n#download.file(url = 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', \n#               destfile = 'test.csv')\ntrain <- read.csv(file = 'train.csv', na.strings = c('NA','#DIV/0!',''))\ntest <- read.csv(file = 'test.csv', na.strings = c('NA','#DIV/0!',''))\n```\n\nDuring exploratory data analysis I noticed that the first 7 columns of the data are dimensional, and may not be pertinent to the prediction model. The balance of the fields are numeric according to the data documentation available here: http://groupware.les.inf.puc-rio.br/har. The balance of the columns are looped through and cast into numeric data with the exception of the last column, which is the categorical class the prediction model will classify for. I perform the same procedure on training and testing data.\n\n```{r}\nfor(i in c(8:ncol(train)-1)) {\n  train[,i] = as.numeric(as.character(train[,i]))\n  test[,i] = as.numeric(as.character(test[,i]))\n}\n```\n\nAnalysis also revealed that several of the many variables are very sparse and thus may not be as useful for building a classification model. The following code initiates a slicer index of column names without the columns with NA values and also removes the inital seven columns of dimensional data. Rather than modify the actual data, this vector of column names will be used as a slicer index into the training data, cross-validation data, and the testing data when interacting with a model.\n\n```{r}\nfeature_index <- colnames(train[colSums(is.na(train)) == 0])\nfeature_index <- feature_index[-c(1:7)]\n```\n\n# Cross-Validation\n\nThe training data will be splitted into subtraining (75%) and subtesting (25%) sample. We need this for cross-validation to improve accuracy and minimize out of sample error. I included only the columns that are determined with feature index.\n\n```{r}\nset.seed(42)\nindex_train <- createDataPartition(y=train$classe, p=0.70, list=FALSE)\ntrain1 <- train[index_train,feature_index]\ntest1 <- train[-index_train,feature_index]\ndim(train1); dim(test1)\n```\n\n# Pre-Model Fitting\n\nBefore a model is fit it is useful to have an idea of the ratio that should be expected of the classification variable outcome. This wil govern how we seek to optimize models for specificity, sensitivity, and positive/negative predictive value.\n\n```{r}\nlibrary(ggplot2)\nqplot(train1$classe, geom=\"histogram\", main = \"Histogram for classe in training data\", \n      xlab = \"Classe value\", ylab = 'Frequency in training data',\n      fill=I(\"blue\"), alpha=I(.4))\n```\n\nThis histogram shows that each of the classifications is within an order of magnitude of any other with each class roughly as likely as any other. This indicates that optimizing a model for accuracy and minimizing overall out of sample error should indicate an optimal model for making classificions.\n\nI selected a random forest from the preliminary analysis. For each candidate model, predictions are made agaist the cross-validation data set. Then, a confusion matrix is calculated and stored for each model for later reference.\n\n```{r, message=FALSE}\nmodel <- train(classe ~ ., data = train1, method = 'rf', \n                trControl = trainControl(method = \"cv\", \n                                         number = 4, \n                                         allowParallel = TRUE, \n                                         verboseIter = TRUE))\nprediction <- predict(model, test1)\ncm <- confusionMatrix(prediction, test1$classe)\ncm\n```\n\nThe Random Forest model appears to be the most accurate which can one see from the confusion matrix. There are only 35 falsely predicted elements, the accuracy is 99.41%, and out of sample error is 0.0049 (equal to 1-accuracy).\n\n\n# Predicting on test data\nFor the test results there are 20 samples asked to be classified. The column names are not consistent between the test and training data. It is necessary to rename the last column in the testing set for compatability. However, since that column will not be used in the model feature set being fed into the predictor the column name change unaffects the predictions. Once the predictions are made from the selected random forest model the prediction vector is shown.\n\n```{r}\nfinal_cols <- length(colnames(test[]))\ncolnames(test)[final_cols] <- 'classe'\nquiz <- predict(model, test[,feature_index])\nquiz\n```",
    "created" : 1437839556702.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2515911622",
    "id" : "FF9BA077",
    "lastKnownWriteTime" : 1437845382,
    "path" : "/Volumes/Macintosh SSD 512/Coursera/PracticalMachineLearning/project/PML_mc.Rmd",
    "project_path" : "PML_mc.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_markdown"
}